// get the config and package and stuff
import chalk from 'chalk';
import * as console from './console.js';
import fail from './fail.js';
import pkg from './package.js';
import sources from './sources.js';
import validDialects from './valid-dialects.js';
import validExclude from './valid-exclude.js';
import validExports from './valid-exports.js';
import validExtraDialects from './valid-extra-dialects.js';
import validImports from './valid-imports.js';
import validProject from './valid-project.js';
const validBoolean = (e, name) => {
    const v = e[name];
    if (v === undefined || typeof v === 'boolean')
        return true;
    fail(`tshy.${name} must be a boolean value if specified, got: ` + v);
    return process.exit(1);
};
const validConfig = (e) => !!e &&
    typeof e === 'object' &&
    (e.exports === undefined || validExports(e.exports)) &&
    (e.dialects === undefined || validDialects(e.dialects)) &&
    (e.project === undefined || validProject(e.project)) &&
    (e.exclude === undefined || validExclude(e.exclude)) &&
    validExtraDialects(e) &&
    validBoolean(e, 'selfLink') &&
    validBoolean(e, 'main');
const getConfig = (pkg, sources) => {
    const tshy = validConfig(pkg.tshy) ? pkg.tshy : {};
    const ti = tshy;
    if (ti.imports) {
        console.debug(chalk.cyan.dim('imports') +
            ' moving from tshy config to top level');
        pkg.imports = {
            ...pkg.imports,
            ...ti.imports,
        };
        delete ti.imports;
    }
    validImports(pkg);
    pkg.tshy = tshy;
    if (tshy.exports)
        return tshy;
    const e = {
        './package.json': './package.json',
    };
    for (const i of sources) {
        if (/^\.\/src\/index\.[^\.]+$/.test(i)) {
            e['.'] = i;
            break;
        }
    }
    tshy.exports = e;
    return tshy;
};
const config = getConfig(pkg, sources);
export default config;
//# sourceMappingURL=config.js.map